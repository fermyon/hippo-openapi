/* tslint:disable */
/* eslint-disable */
/**
 * Hippo.Web
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AppChannelSummary
 */
export interface AppChannelSummary {
    /**
     * 
     * @type {string}
     * @memberof AppChannelSummary
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AppChannelSummary
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof AppChannelSummary
     */
    'activeRevisionNumber'?: string | null;
}
/**
 * 
 * @export
 * @interface AppDto
 */
export interface AppDto {
    /**
     * 
     * @type {string}
     * @memberof AppDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AppDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof AppDto
     */
    'storageId': string;
    /**
     * 
     * @type {string}
     * @memberof AppDto
     */
    'description'?: string | null;
    /**
     * 
     * @type {Array<AppChannelSummary>}
     * @memberof AppDto
     */
    'channels': Array<AppChannelSummary>;
}
/**
 * 
 * @export
 * @interface AppSummaryDto
 */
export interface AppSummaryDto {
    /**
     * 
     * @type {string}
     * @memberof AppSummaryDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AppSummaryDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof AppSummaryDto
     */
    'storageId': string;
    /**
     * 
     * @type {Array<AppChannelSummary>}
     * @memberof AppSummaryDto
     */
    'channels': Array<AppChannelSummary>;
}
/**
 * 
 * @export
 * @interface AppsVm
 */
export interface AppsVm {
    /**
     * 
     * @type {Array<AppDto>}
     * @memberof AppsVm
     */
    'apps': Array<AppDto>;
}
/**
 * 
 * @export
 * @interface CertificateDto
 */
export interface CertificateDto {
    /**
     * 
     * @type {string}
     * @memberof CertificateDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof CertificateDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CertificateDto
     */
    'publicKey': string;
    /**
     * 
     * @type {string}
     * @memberof CertificateDto
     */
    'privateKey': string;
    /**
     * 
     * @type {Array<ChannelDto>}
     * @memberof CertificateDto
     */
    'channels': Array<ChannelDto>;
}
/**
 * 
 * @export
 * @interface CertificatesVm
 */
export interface CertificatesVm {
    /**
     * 
     * @type {Array<CertificateDto>}
     * @memberof CertificatesVm
     */
    'certificates': Array<CertificateDto>;
}
/**
 * 
 * @export
 * @interface ChannelDto
 */
export interface ChannelDto {
    /**
     * 
     * @type {string}
     * @memberof ChannelDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ChannelDto
     */
    'appId': string;
    /**
     * 
     * @type {string}
     * @memberof ChannelDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ChannelDto
     */
    'domain': string;
    /**
     * 
     * @type {ChannelRevisionSelectionStrategy}
     * @memberof ChannelDto
     */
    'revisionSelectionStrategy': ChannelRevisionSelectionStrategy;
    /**
     * 
     * @type {RevisionDto}
     * @memberof ChannelDto
     */
    'activeRevision'?: RevisionDto;
    /**
     * 
     * @type {string}
     * @memberof ChannelDto
     */
    'rangeRule'?: string | null;
    /**
     * 
     * @type {CertificateDto}
     * @memberof ChannelDto
     */
    'certificate'?: CertificateDto;
    /**
     * 
     * @type {Array<EnvironmentVariableDto>}
     * @memberof ChannelDto
     */
    'environmentVariables': Array<EnvironmentVariableDto>;
    /**
     * 
     * @type {AppSummaryDto}
     * @memberof ChannelDto
     */
    'appSummary'?: AppSummaryDto;
}
/**
 * 
 * @export
 * @interface ChannelJobStatus
 */
export interface ChannelJobStatus {
    /**
     * 
     * @type {string}
     * @memberof ChannelJobStatus
     */
    'channelId': string;
    /**
     * 
     * @type {JobStatus}
     * @memberof ChannelJobStatus
     */
    'status': JobStatus;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ChannelRevisionSelectionStrategy = {
    UseRangeRule: 'UseRangeRule',
    UseSpecifiedRevision: 'UseSpecifiedRevision'
} as const;

export type ChannelRevisionSelectionStrategy = typeof ChannelRevisionSelectionStrategy[keyof typeof ChannelRevisionSelectionStrategy];


/**
 * 
 * @export
 * @interface ChannelsVm
 */
export interface ChannelsVm {
    /**
     * 
     * @type {Array<ChannelDto>}
     * @memberof ChannelsVm
     */
    'channels': Array<ChannelDto>;
}
/**
 * 
 * @export
 * @interface CreateAccountCommand
 */
export interface CreateAccountCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateAccountCommand
     */
    'userName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAccountCommand
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface CreateAppCommand
 */
export interface CreateAppCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateAppCommand
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateAppCommand
     */
    'storageId': string;
}
/**
 * 
 * @export
 * @interface CreateCertificateCommand
 */
export interface CreateCertificateCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateCertificateCommand
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCertificateCommand
     */
    'publicKey': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCertificateCommand
     */
    'privateKey': string;
}
/**
 * 
 * @export
 * @interface CreateChannelCommand
 */
export interface CreateChannelCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateChannelCommand
     */
    'appId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateChannelCommand
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateChannelCommand
     */
    'domain'?: string | null;
    /**
     * 
     * @type {ChannelRevisionSelectionStrategy}
     * @memberof CreateChannelCommand
     */
    'revisionSelectionStrategy': ChannelRevisionSelectionStrategy;
    /**
     * 
     * @type {string}
     * @memberof CreateChannelCommand
     */
    'rangeRule'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateChannelCommand
     */
    'activeRevisionId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateChannelCommand
     */
    'certificateId'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateEnvironmentVariableCommand
 */
export interface CreateEnvironmentVariableCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateEnvironmentVariableCommand
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof CreateEnvironmentVariableCommand
     */
    'value': string;
    /**
     * 
     * @type {string}
     * @memberof CreateEnvironmentVariableCommand
     */
    'channelId': string;
}
/**
 * 
 * @export
 * @interface CreateTokenCommand
 */
export interface CreateTokenCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateTokenCommand
     */
    'userName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateTokenCommand
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface EnvironmentVariableDto
 */
export interface EnvironmentVariableDto {
    /**
     * 
     * @type {string}
     * @memberof EnvironmentVariableDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof EnvironmentVariableDto
     */
    'channelId': string;
    /**
     * 
     * @type {string}
     * @memberof EnvironmentVariableDto
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof EnvironmentVariableDto
     */
    'value': string;
}
/**
 * 
 * @export
 * @interface EnvironmentVariablesVm
 */
export interface EnvironmentVariablesVm {
    /**
     * 
     * @type {Array<EnvironmentVariableDto>}
     * @memberof EnvironmentVariablesVm
     */
    'environmentVariables': Array<EnvironmentVariableDto>;
}
/**
 * 
 * @export
 * @interface GetChannelLogsVm
 */
export interface GetChannelLogsVm {
    /**
     * 
     * @type {Array<string>}
     * @memberof GetChannelLogsVm
     */
    'logs': Array<string>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const JobStatus = {
    Unknown: 'Unknown',
    Pending: 'Pending',
    Running: 'Running',
    Dead: 'Dead'
} as const;

export type JobStatus = typeof JobStatus[keyof typeof JobStatus];


/**
 * 
 * @export
 * @interface RegisterRevisionCommand
 */
export interface RegisterRevisionCommand {
    /**
     * 
     * @type {string}
     * @memberof RegisterRevisionCommand
     */
    'appStorageId': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRevisionCommand
     */
    'revisionNumber': string;
}
/**
 * 
 * @export
 * @interface RevisionComponentDto
 */
export interface RevisionComponentDto {
    /**
     * 
     * @type {string}
     * @memberof RevisionComponentDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof RevisionComponentDto
     */
    'source': string;
    /**
     * 
     * @type {string}
     * @memberof RevisionComponentDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof RevisionComponentDto
     */
    'route'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RevisionComponentDto
     */
    'channel'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RevisionComponentDto
     */
    'type'?: string | null;
}
/**
 * 
 * @export
 * @interface RevisionDto
 */
export interface RevisionDto {
    /**
     * 
     * @type {string}
     * @memberof RevisionDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof RevisionDto
     */
    'appId': string;
    /**
     * 
     * @type {string}
     * @memberof RevisionDto
     */
    'revisionNumber': string;
    /**
     * 
     * @type {Array<RevisionComponentDto>}
     * @memberof RevisionDto
     */
    'components': Array<RevisionComponentDto>;
}
/**
 * 
 * @export
 * @interface RevisionsVm
 */
export interface RevisionsVm {
    /**
     * 
     * @type {Array<RevisionDto>}
     * @memberof RevisionsVm
     */
    'revisions': Array<RevisionDto>;
}
/**
 * 
 * @export
 * @interface StorageList
 */
export interface StorageList {
    /**
     * 
     * @type {Array<string>}
     * @memberof StorageList
     */
    'storages': Array<string>;
}
/**
 * 
 * @export
 * @interface TokenInfo
 */
export interface TokenInfo {
    /**
     * 
     * @type {string}
     * @memberof TokenInfo
     */
    'token'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TokenInfo
     */
    'expiration'?: string;
}
/**
 * 
 * @export
 * @interface UpdateAppCommand
 */
export interface UpdateAppCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdateAppCommand
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateAppCommand
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateAppCommand
     */
    'storageId': string;
}
/**
 * 
 * @export
 * @interface UpdateCertificateCommand
 */
export interface UpdateCertificateCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdateCertificateCommand
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCertificateCommand
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCertificateCommand
     */
    'publicKey': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCertificateCommand
     */
    'privateKey': string;
}
/**
 * 
 * @export
 * @interface UpdateChannelCommand
 */
export interface UpdateChannelCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdateChannelCommand
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateChannelCommand
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateChannelCommand
     */
    'domain': string;
    /**
     * 
     * @type {ChannelRevisionSelectionStrategy}
     * @memberof UpdateChannelCommand
     */
    'revisionSelectionStrategy': ChannelRevisionSelectionStrategy;
    /**
     * 
     * @type {string}
     * @memberof UpdateChannelCommand
     */
    'rangeRule'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateChannelCommand
     */
    'activeRevisionId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateChannelCommand
     */
    'certificateId'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateChannelEnvironmentVariablesCommand
 */
export interface UpdateChannelEnvironmentVariablesCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdateChannelEnvironmentVariablesCommand
     */
    'channelId'?: string;
    /**
     * 
     * @type {Array<UpdateEnvironmentVariableDto>}
     * @memberof UpdateChannelEnvironmentVariablesCommand
     */
    'environmentVariables'?: Array<UpdateEnvironmentVariableDto> | null;
}
/**
 * 
 * @export
 * @interface UpdateEnvironmentVariableCommand
 */
export interface UpdateEnvironmentVariableCommand {
    /**
     * 
     * @type {string}
     * @memberof UpdateEnvironmentVariableCommand
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateEnvironmentVariableCommand
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateEnvironmentVariableCommand
     */
    'value': string;
}
/**
 * 
 * @export
 * @interface UpdateEnvironmentVariableDto
 */
export interface UpdateEnvironmentVariableDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateEnvironmentVariableDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateEnvironmentVariableDto
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateEnvironmentVariableDto
     */
    'value': string;
}

/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateTokenCommand} [createTokenCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountCreatetokenPost: async (createTokenCommand?: CreateTokenCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account/createtoken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTokenCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateAccountCommand} [createAccountCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountPost: async (createAccountCommand?: CreateAccountCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAccountCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateTokenCommand} [createTokenCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountCreatetokenPost(createTokenCommand?: CreateTokenCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountCreatetokenPost(createTokenCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateAccountCommand} [createAccountCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccountPost(createAccountCommand?: CreateAccountCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountPost(createAccountCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateTokenCommand} [createTokenCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountCreatetokenPost(createTokenCommand?: CreateTokenCommand, options?: any): AxiosPromise<TokenInfo> {
            return localVarFp.apiAccountCreatetokenPost(createTokenCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateAccountCommand} [createAccountCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccountPost(createAccountCommand?: CreateAccountCommand, options?: any): AxiosPromise<string> {
            return localVarFp.apiAccountPost(createAccountCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
    /**
     * 
     * @param {CreateTokenCommand} [createTokenCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountCreatetokenPost(createTokenCommand?: CreateTokenCommand, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountCreatetokenPost(createTokenCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateAccountCommand} [createAccountCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public apiAccountPost(createAccountCommand?: CreateAccountCommand, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).apiAccountPost(createAccountCommand, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AppApi - axios parameter creator
 * @export
 */
export const AppApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppExportGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAppIdDelete', 'id', id)
            const localVarPath = `/api/app/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateAppCommand} [updateAppCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppIdPut: async (id: string, updateAppCommand?: UpdateAppCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAppIdPut', 'id', id)
            const localVarPath = `/api/app/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAppCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateAppCommand} [createAppCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppPost: async (createAppCommand?: CreateAppCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/app`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAppCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppApi - functional programming interface
 * @export
 */
export const AppApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppExportGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppExportGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppsVm>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateAppCommand} [updateAppCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppIdPut(id: string, updateAppCommand?: UpdateAppCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppIdPut(id, updateAppCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateAppCommand} [createAppCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAppPost(createAppCommand?: CreateAppCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAppPost(createAppCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppApi - factory interface
 * @export
 */
export const AppApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppExportGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiAppExportGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppGet(options?: any): AxiosPromise<AppsVm> {
            return localVarFp.apiAppGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiAppIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateAppCommand} [updateAppCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppIdPut(id: string, updateAppCommand?: UpdateAppCommand, options?: any): AxiosPromise<void> {
            return localVarFp.apiAppIdPut(id, updateAppCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateAppCommand} [createAppCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAppPost(createAppCommand?: CreateAppCommand, options?: any): AxiosPromise<string> {
            return localVarFp.apiAppPost(createAppCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppApi - object-oriented interface
 * @export
 * @class AppApi
 * @extends {BaseAPI}
 */
export class AppApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public apiAppExportGet(options?: AxiosRequestConfig) {
        return AppApiFp(this.configuration).apiAppExportGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public apiAppGet(options?: AxiosRequestConfig) {
        return AppApiFp(this.configuration).apiAppGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public apiAppIdDelete(id: string, options?: AxiosRequestConfig) {
        return AppApiFp(this.configuration).apiAppIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateAppCommand} [updateAppCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public apiAppIdPut(id: string, updateAppCommand?: UpdateAppCommand, options?: AxiosRequestConfig) {
        return AppApiFp(this.configuration).apiAppIdPut(id, updateAppCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateAppCommand} [createAppCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public apiAppPost(createAppCommand?: CreateAppCommand, options?: AxiosRequestConfig) {
        return AppApiFp(this.configuration).apiAppPost(createAppCommand, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CertificateApi - axios parameter creator
 * @export
 */
export const CertificateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCertificateExportGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/certificate/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCertificateGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/certificate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCertificateIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCertificateIdDelete', 'id', id)
            const localVarPath = `/api/certificate/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCertificateCommand} [updateCertificateCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCertificateIdPut: async (id: string, updateCertificateCommand?: UpdateCertificateCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCertificateIdPut', 'id', id)
            const localVarPath = `/api/certificate/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCertificateCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateCertificateCommand} [createCertificateCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCertificatePost: async (createCertificateCommand?: CreateCertificateCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/certificate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCertificateCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CertificateApi - functional programming interface
 * @export
 */
export const CertificateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CertificateApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCertificateExportGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCertificateExportGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCertificateGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CertificatesVm>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCertificateGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCertificateIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCertificateIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCertificateCommand} [updateCertificateCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCertificateIdPut(id: string, updateCertificateCommand?: UpdateCertificateCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCertificateIdPut(id, updateCertificateCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateCertificateCommand} [createCertificateCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCertificatePost(createCertificateCommand?: CreateCertificateCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCertificatePost(createCertificateCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CertificateApi - factory interface
 * @export
 */
export const CertificateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CertificateApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCertificateExportGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiCertificateExportGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCertificateGet(options?: any): AxiosPromise<CertificatesVm> {
            return localVarFp.apiCertificateGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCertificateIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiCertificateIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCertificateCommand} [updateCertificateCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCertificateIdPut(id: string, updateCertificateCommand?: UpdateCertificateCommand, options?: any): AxiosPromise<void> {
            return localVarFp.apiCertificateIdPut(id, updateCertificateCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateCertificateCommand} [createCertificateCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCertificatePost(createCertificateCommand?: CreateCertificateCommand, options?: any): AxiosPromise<string> {
            return localVarFp.apiCertificatePost(createCertificateCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CertificateApi - object-oriented interface
 * @export
 * @class CertificateApi
 * @extends {BaseAPI}
 */
export class CertificateApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificateApi
     */
    public apiCertificateExportGet(options?: AxiosRequestConfig) {
        return CertificateApiFp(this.configuration).apiCertificateExportGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificateApi
     */
    public apiCertificateGet(options?: AxiosRequestConfig) {
        return CertificateApiFp(this.configuration).apiCertificateGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificateApi
     */
    public apiCertificateIdDelete(id: string, options?: AxiosRequestConfig) {
        return CertificateApiFp(this.configuration).apiCertificateIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateCertificateCommand} [updateCertificateCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificateApi
     */
    public apiCertificateIdPut(id: string, updateCertificateCommand?: UpdateCertificateCommand, options?: AxiosRequestConfig) {
        return CertificateApiFp(this.configuration).apiCertificateIdPut(id, updateCertificateCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateCertificateCommand} [createCertificateCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificateApi
     */
    public apiCertificatePost(createCertificateCommand?: CreateCertificateCommand, options?: AxiosRequestConfig) {
        return CertificateApiFp(this.configuration).apiCertificatePost(createCertificateCommand, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ChannelApi - axios parameter creator
 * @export
 */
export const ChannelApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} channelId 
         * @param {UpdateChannelEnvironmentVariablesCommand} [updateChannelEnvironmentVariablesCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChannelChannelIdEnvironmentVariablesPut: async (channelId: string, updateChannelEnvironmentVariablesCommand?: UpdateChannelEnvironmentVariablesCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('apiChannelChannelIdEnvironmentVariablesPut', 'channelId', channelId)
            const localVarPath = `/api/channel/{channelId}/environment-variables`
                .replace(`{${"channelId"}}`, encodeURIComponent(String(channelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateChannelEnvironmentVariablesCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} channelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChannelChannelIdGet: async (channelId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('apiChannelChannelIdGet', 'channelId', channelId)
            const localVarPath = `/api/channel/{channelId}`
                .replace(`{${"channelId"}}`, encodeURIComponent(String(channelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChannelExportGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/channel/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChannelGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/channel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChannelIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiChannelIdDelete', 'id', id)
            const localVarPath = `/api/channel/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateChannelCommand} [updateChannelCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChannelIdPut: async (id: string, updateChannelCommand?: UpdateChannelCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiChannelIdPut', 'id', id)
            const localVarPath = `/api/channel/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateChannelCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} channelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChannelLogsChannelIdGet: async (channelId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            assertParamExists('apiChannelLogsChannelIdGet', 'channelId', channelId)
            const localVarPath = `/api/channel/logs/{channelId}`
                .replace(`{${"channelId"}}`, encodeURIComponent(String(channelId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateChannelCommand} [createChannelCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChannelPost: async (createChannelCommand?: CreateChannelCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/channel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createChannelCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChannelApi - functional programming interface
 * @export
 */
export const ChannelApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChannelApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} channelId 
         * @param {UpdateChannelEnvironmentVariablesCommand} [updateChannelEnvironmentVariablesCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiChannelChannelIdEnvironmentVariablesPut(channelId: string, updateChannelEnvironmentVariablesCommand?: UpdateChannelEnvironmentVariablesCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiChannelChannelIdEnvironmentVariablesPut(channelId, updateChannelEnvironmentVariablesCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} channelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiChannelChannelIdGet(channelId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiChannelChannelIdGet(channelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiChannelExportGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiChannelExportGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiChannelGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelsVm>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiChannelGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiChannelIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiChannelIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateChannelCommand} [updateChannelCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiChannelIdPut(id: string, updateChannelCommand?: UpdateChannelCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiChannelIdPut(id, updateChannelCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} channelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiChannelLogsChannelIdGet(channelId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetChannelLogsVm>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiChannelLogsChannelIdGet(channelId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateChannelCommand} [createChannelCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiChannelPost(createChannelCommand?: CreateChannelCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiChannelPost(createChannelCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ChannelApi - factory interface
 * @export
 */
export const ChannelApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChannelApiFp(configuration)
    return {
        /**
         * 
         * @param {string} channelId 
         * @param {UpdateChannelEnvironmentVariablesCommand} [updateChannelEnvironmentVariablesCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChannelChannelIdEnvironmentVariablesPut(channelId: string, updateChannelEnvironmentVariablesCommand?: UpdateChannelEnvironmentVariablesCommand, options?: any): AxiosPromise<void> {
            return localVarFp.apiChannelChannelIdEnvironmentVariablesPut(channelId, updateChannelEnvironmentVariablesCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} channelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChannelChannelIdGet(channelId: string, options?: any): AxiosPromise<ChannelDto> {
            return localVarFp.apiChannelChannelIdGet(channelId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChannelExportGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiChannelExportGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChannelGet(options?: any): AxiosPromise<ChannelsVm> {
            return localVarFp.apiChannelGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChannelIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiChannelIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateChannelCommand} [updateChannelCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChannelIdPut(id: string, updateChannelCommand?: UpdateChannelCommand, options?: any): AxiosPromise<void> {
            return localVarFp.apiChannelIdPut(id, updateChannelCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} channelId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChannelLogsChannelIdGet(channelId: string, options?: any): AxiosPromise<GetChannelLogsVm> {
            return localVarFp.apiChannelLogsChannelIdGet(channelId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateChannelCommand} [createChannelCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiChannelPost(createChannelCommand?: CreateChannelCommand, options?: any): AxiosPromise<string> {
            return localVarFp.apiChannelPost(createChannelCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChannelApi - object-oriented interface
 * @export
 * @class ChannelApi
 * @extends {BaseAPI}
 */
export class ChannelApi extends BaseAPI {
    /**
     * 
     * @param {string} channelId 
     * @param {UpdateChannelEnvironmentVariablesCommand} [updateChannelEnvironmentVariablesCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    public apiChannelChannelIdEnvironmentVariablesPut(channelId: string, updateChannelEnvironmentVariablesCommand?: UpdateChannelEnvironmentVariablesCommand, options?: AxiosRequestConfig) {
        return ChannelApiFp(this.configuration).apiChannelChannelIdEnvironmentVariablesPut(channelId, updateChannelEnvironmentVariablesCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} channelId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    public apiChannelChannelIdGet(channelId: string, options?: AxiosRequestConfig) {
        return ChannelApiFp(this.configuration).apiChannelChannelIdGet(channelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    public apiChannelExportGet(options?: AxiosRequestConfig) {
        return ChannelApiFp(this.configuration).apiChannelExportGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    public apiChannelGet(options?: AxiosRequestConfig) {
        return ChannelApiFp(this.configuration).apiChannelGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    public apiChannelIdDelete(id: string, options?: AxiosRequestConfig) {
        return ChannelApiFp(this.configuration).apiChannelIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateChannelCommand} [updateChannelCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    public apiChannelIdPut(id: string, updateChannelCommand?: UpdateChannelCommand, options?: AxiosRequestConfig) {
        return ChannelApiFp(this.configuration).apiChannelIdPut(id, updateChannelCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} channelId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    public apiChannelLogsChannelIdGet(channelId: string, options?: AxiosRequestConfig) {
        return ChannelApiFp(this.configuration).apiChannelLogsChannelIdGet(channelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateChannelCommand} [createChannelCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     */
    public apiChannelPost(createChannelCommand?: CreateChannelCommand, options?: AxiosRequestConfig) {
        return ChannelApiFp(this.configuration).apiChannelPost(createChannelCommand, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EnvironmentVariableApi - axios parameter creator
 * @export
 */
export const EnvironmentVariableApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEnvironmentvariableExportGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/environmentvariable/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEnvironmentvariableGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/environmentvariable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEnvironmentvariableIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiEnvironmentvariableIdDelete', 'id', id)
            const localVarPath = `/api/environmentvariable/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateEnvironmentVariableCommand} [updateEnvironmentVariableCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEnvironmentvariableIdPut: async (id: string, updateEnvironmentVariableCommand?: UpdateEnvironmentVariableCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiEnvironmentvariableIdPut', 'id', id)
            const localVarPath = `/api/environmentvariable/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateEnvironmentVariableCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateEnvironmentVariableCommand} [createEnvironmentVariableCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEnvironmentvariablePost: async (createEnvironmentVariableCommand?: CreateEnvironmentVariableCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/environmentvariable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createEnvironmentVariableCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnvironmentVariableApi - functional programming interface
 * @export
 */
export const EnvironmentVariableApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EnvironmentVariableApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEnvironmentvariableExportGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEnvironmentvariableExportGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEnvironmentvariableGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvironmentVariablesVm>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEnvironmentvariableGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEnvironmentvariableIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEnvironmentvariableIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateEnvironmentVariableCommand} [updateEnvironmentVariableCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEnvironmentvariableIdPut(id: string, updateEnvironmentVariableCommand?: UpdateEnvironmentVariableCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEnvironmentvariableIdPut(id, updateEnvironmentVariableCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateEnvironmentVariableCommand} [createEnvironmentVariableCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEnvironmentvariablePost(createEnvironmentVariableCommand?: CreateEnvironmentVariableCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEnvironmentvariablePost(createEnvironmentVariableCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EnvironmentVariableApi - factory interface
 * @export
 */
export const EnvironmentVariableApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EnvironmentVariableApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEnvironmentvariableExportGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiEnvironmentvariableExportGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEnvironmentvariableGet(options?: any): AxiosPromise<EnvironmentVariablesVm> {
            return localVarFp.apiEnvironmentvariableGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEnvironmentvariableIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiEnvironmentvariableIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateEnvironmentVariableCommand} [updateEnvironmentVariableCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEnvironmentvariableIdPut(id: string, updateEnvironmentVariableCommand?: UpdateEnvironmentVariableCommand, options?: any): AxiosPromise<void> {
            return localVarFp.apiEnvironmentvariableIdPut(id, updateEnvironmentVariableCommand, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateEnvironmentVariableCommand} [createEnvironmentVariableCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEnvironmentvariablePost(createEnvironmentVariableCommand?: CreateEnvironmentVariableCommand, options?: any): AxiosPromise<string> {
            return localVarFp.apiEnvironmentvariablePost(createEnvironmentVariableCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EnvironmentVariableApi - object-oriented interface
 * @export
 * @class EnvironmentVariableApi
 * @extends {BaseAPI}
 */
export class EnvironmentVariableApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentVariableApi
     */
    public apiEnvironmentvariableExportGet(options?: AxiosRequestConfig) {
        return EnvironmentVariableApiFp(this.configuration).apiEnvironmentvariableExportGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentVariableApi
     */
    public apiEnvironmentvariableGet(options?: AxiosRequestConfig) {
        return EnvironmentVariableApiFp(this.configuration).apiEnvironmentvariableGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentVariableApi
     */
    public apiEnvironmentvariableIdDelete(id: string, options?: AxiosRequestConfig) {
        return EnvironmentVariableApiFp(this.configuration).apiEnvironmentvariableIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateEnvironmentVariableCommand} [updateEnvironmentVariableCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentVariableApi
     */
    public apiEnvironmentvariableIdPut(id: string, updateEnvironmentVariableCommand?: UpdateEnvironmentVariableCommand, options?: AxiosRequestConfig) {
        return EnvironmentVariableApiFp(this.configuration).apiEnvironmentvariableIdPut(id, updateEnvironmentVariableCommand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateEnvironmentVariableCommand} [createEnvironmentVariableCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentVariableApi
     */
    public apiEnvironmentvariablePost(createEnvironmentVariableCommand?: CreateEnvironmentVariableCommand, options?: AxiosRequestConfig) {
        return EnvironmentVariableApiFp(this.configuration).apiEnvironmentvariablePost(createEnvironmentVariableCommand, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * JobStatusApi - axios parameter creator
 * @export
 */
export const JobStatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobstatusGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/jobstatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobStatusApi - functional programming interface
 * @export
 */
export const JobStatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobStatusApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobstatusGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ChannelJobStatus>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobstatusGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JobStatusApi - factory interface
 * @export
 */
export const JobStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobStatusApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobstatusGet(options?: any): AxiosPromise<Array<ChannelJobStatus>> {
            return localVarFp.apiJobstatusGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobStatusApi - object-oriented interface
 * @export
 * @class JobStatusApi
 * @extends {BaseAPI}
 */
export class JobStatusApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobStatusApi
     */
    public apiJobstatusGet(options?: AxiosRequestConfig) {
        return JobStatusApiFp(this.configuration).apiJobstatusGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RevisionApi - axios parameter creator
 * @export
 */
export const RevisionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRevisionExportGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/revision/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRevisionGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/revision`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRevisionIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiRevisionIdDelete', 'id', id)
            const localVarPath = `/api/revision/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterRevisionCommand} [registerRevisionCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRevisionPost: async (registerRevisionCommand?: RegisterRevisionCommand, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/revision`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerRevisionCommand, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RevisionApi - functional programming interface
 * @export
 */
export const RevisionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RevisionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRevisionExportGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRevisionExportGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRevisionGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RevisionsVm>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRevisionGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRevisionIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRevisionIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RegisterRevisionCommand} [registerRevisionCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRevisionPost(registerRevisionCommand?: RegisterRevisionCommand, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRevisionPost(registerRevisionCommand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RevisionApi - factory interface
 * @export
 */
export const RevisionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RevisionApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRevisionExportGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiRevisionExportGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRevisionGet(options?: any): AxiosPromise<RevisionsVm> {
            return localVarFp.apiRevisionGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRevisionIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiRevisionIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterRevisionCommand} [registerRevisionCommand] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRevisionPost(registerRevisionCommand?: RegisterRevisionCommand, options?: any): AxiosPromise<void> {
            return localVarFp.apiRevisionPost(registerRevisionCommand, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RevisionApi - object-oriented interface
 * @export
 * @class RevisionApi
 * @extends {BaseAPI}
 */
export class RevisionApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RevisionApi
     */
    public apiRevisionExportGet(options?: AxiosRequestConfig) {
        return RevisionApiFp(this.configuration).apiRevisionExportGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RevisionApi
     */
    public apiRevisionGet(options?: AxiosRequestConfig) {
        return RevisionApiFp(this.configuration).apiRevisionGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RevisionApi
     */
    public apiRevisionIdDelete(id: string, options?: AxiosRequestConfig) {
        return RevisionApiFp(this.configuration).apiRevisionIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterRevisionCommand} [registerRevisionCommand] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RevisionApi
     */
    public apiRevisionPost(registerRevisionCommand?: RegisterRevisionCommand, options?: AxiosRequestConfig) {
        return RevisionApiFp(this.configuration).apiRevisionPost(registerRevisionCommand, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StorageApi - axios parameter creator
 * @export
 */
export const StorageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [queryString] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStorageGet: async (queryString?: string, offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/storage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (queryString !== undefined) {
                localVarQueryParameter['queryString'] = queryString;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StorageApi - functional programming interface
 * @export
 */
export const StorageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StorageApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [queryString] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiStorageGet(queryString?: string, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StorageList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiStorageGet(queryString, offset, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StorageApi - factory interface
 * @export
 */
export const StorageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StorageApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [queryString] 
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiStorageGet(queryString?: string, offset?: number, limit?: number, options?: any): AxiosPromise<StorageList> {
            return localVarFp.apiStorageGet(queryString, offset, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StorageApi - object-oriented interface
 * @export
 * @class StorageApi
 * @extends {BaseAPI}
 */
export class StorageApi extends BaseAPI {
    /**
     * 
     * @param {string} [queryString] 
     * @param {number} [offset] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StorageApi
     */
    public apiStorageGet(queryString?: string, offset?: number, limit?: number, options?: AxiosRequestConfig) {
        return StorageApiFp(this.configuration).apiStorageGet(queryString, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }
}


