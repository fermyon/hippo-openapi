/* tslint:disable */
/* eslint-disable */
/**
 * Hippo.Web
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AppSummaryDto } from './AppSummaryDto';
import {
    AppSummaryDtoFromJSON,
    AppSummaryDtoFromJSONTyped,
    AppSummaryDtoToJSON,
} from './AppSummaryDto';
import type { CertificateDto } from './CertificateDto';
import {
    CertificateDtoFromJSON,
    CertificateDtoFromJSONTyped,
    CertificateDtoToJSON,
} from './CertificateDto';
import type { ChannelRevisionSelectionStrategy } from './ChannelRevisionSelectionStrategy';
import {
    ChannelRevisionSelectionStrategyFromJSON,
    ChannelRevisionSelectionStrategyFromJSONTyped,
    ChannelRevisionSelectionStrategyToJSON,
} from './ChannelRevisionSelectionStrategy';
import type { EnvironmentVariableDto } from './EnvironmentVariableDto';
import {
    EnvironmentVariableDtoFromJSON,
    EnvironmentVariableDtoFromJSONTyped,
    EnvironmentVariableDtoToJSON,
} from './EnvironmentVariableDto';
import type { RevisionDto } from './RevisionDto';
import {
    RevisionDtoFromJSON,
    RevisionDtoFromJSONTyped,
    RevisionDtoToJSON,
} from './RevisionDto';

/**
 * 
 * @export
 * @interface ChannelDto
 */
export interface ChannelDto {
    /**
     * 
     * @type {string}
     * @memberof ChannelDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelDto
     */
    appId: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelDto
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelDto
     */
    domain: string;
    /**
     * 
     * @type {ChannelRevisionSelectionStrategy}
     * @memberof ChannelDto
     */
    revisionSelectionStrategy: ChannelRevisionSelectionStrategy;
    /**
     * 
     * @type {RevisionDto}
     * @memberof ChannelDto
     */
    activeRevision?: RevisionDto;
    /**
     * 
     * @type {string}
     * @memberof ChannelDto
     */
    rangeRule?: string | null;
    /**
     * 
     * @type {CertificateDto}
     * @memberof ChannelDto
     */
    certificate?: CertificateDto;
    /**
     * 
     * @type {Array<EnvironmentVariableDto>}
     * @memberof ChannelDto
     */
    environmentVariables: Array<EnvironmentVariableDto>;
    /**
     * 
     * @type {AppSummaryDto}
     * @memberof ChannelDto
     */
    appSummary?: AppSummaryDto;
}

/**
 * Check if a given object implements the ChannelDto interface.
 */
export function instanceOfChannelDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "appId" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "domain" in value;
    isInstance = isInstance && "revisionSelectionStrategy" in value;
    isInstance = isInstance && "environmentVariables" in value;

    return isInstance;
}

export function ChannelDtoFromJSON(json: any): ChannelDto {
    return ChannelDtoFromJSONTyped(json, false);
}

export function ChannelDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChannelDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'appId': json['appId'],
        'name': json['name'],
        'domain': json['domain'],
        'revisionSelectionStrategy': ChannelRevisionSelectionStrategyFromJSON(json['revisionSelectionStrategy']),
        'activeRevision': !exists(json, 'activeRevision') ? undefined : RevisionDtoFromJSON(json['activeRevision']),
        'rangeRule': !exists(json, 'rangeRule') ? undefined : json['rangeRule'],
        'certificate': !exists(json, 'certificate') ? undefined : CertificateDtoFromJSON(json['certificate']),
        'environmentVariables': ((json['environmentVariables'] as Array<any>).map(EnvironmentVariableDtoFromJSON)),
        'appSummary': !exists(json, 'appSummary') ? undefined : AppSummaryDtoFromJSON(json['appSummary']),
    };
}

export function ChannelDtoToJSON(value?: ChannelDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'appId': value.appId,
        'name': value.name,
        'domain': value.domain,
        'revisionSelectionStrategy': ChannelRevisionSelectionStrategyToJSON(value.revisionSelectionStrategy),
        'activeRevision': RevisionDtoToJSON(value.activeRevision),
        'rangeRule': value.rangeRule,
        'certificate': CertificateDtoToJSON(value.certificate),
        'environmentVariables': ((value.environmentVariables as Array<any>).map(EnvironmentVariableDtoToJSON)),
        'appSummary': AppSummaryDtoToJSON(value.appSummary),
    };
}

