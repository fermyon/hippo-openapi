/* tslint:disable */
/* eslint-disable */
/**
 * Hippo.Web
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ChannelRevisionSelectionStrategy } from './ChannelRevisionSelectionStrategy';
import {
    ChannelRevisionSelectionStrategyFromJSON,
    ChannelRevisionSelectionStrategyFromJSONTyped,
    ChannelRevisionSelectionStrategyToJSON,
} from './ChannelRevisionSelectionStrategy';

/**
 * 
 * @export
 * @interface CreateChannelCommand
 */
export interface CreateChannelCommand {
    /**
     * 
     * @type {string}
     * @memberof CreateChannelCommand
     */
    appId: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChannelCommand
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChannelCommand
     */
    domain?: string | null;
    /**
     * 
     * @type {ChannelRevisionSelectionStrategy}
     * @memberof CreateChannelCommand
     */
    revisionSelectionStrategy: ChannelRevisionSelectionStrategy;
    /**
     * 
     * @type {string}
     * @memberof CreateChannelCommand
     */
    rangeRule?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateChannelCommand
     */
    activeRevisionId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateChannelCommand
     */
    certificateId?: string | null;
}

/**
 * Check if a given object implements the CreateChannelCommand interface.
 */
export function instanceOfCreateChannelCommand(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "appId" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "revisionSelectionStrategy" in value;

    return isInstance;
}

export function CreateChannelCommandFromJSON(json: any): CreateChannelCommand {
    return CreateChannelCommandFromJSONTyped(json, false);
}

export function CreateChannelCommandFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateChannelCommand {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'appId': json['appId'],
        'name': json['name'],
        'domain': !exists(json, 'domain') ? undefined : json['domain'],
        'revisionSelectionStrategy': ChannelRevisionSelectionStrategyFromJSON(json['revisionSelectionStrategy']),
        'rangeRule': !exists(json, 'rangeRule') ? undefined : json['rangeRule'],
        'activeRevisionId': !exists(json, 'activeRevisionId') ? undefined : json['activeRevisionId'],
        'certificateId': !exists(json, 'certificateId') ? undefined : json['certificateId'],
    };
}

export function CreateChannelCommandToJSON(value?: CreateChannelCommand | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'appId': value.appId,
        'name': value.name,
        'domain': value.domain,
        'revisionSelectionStrategy': ChannelRevisionSelectionStrategyToJSON(value.revisionSelectionStrategy),
        'rangeRule': value.rangeRule,
        'activeRevisionId': value.activeRevisionId,
        'certificateId': value.certificateId,
    };
}

