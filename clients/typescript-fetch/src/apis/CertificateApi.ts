/* tslint:disable */
/* eslint-disable */
/**
 * Hippo.Web
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CertificatesVm,
  CreateCertificateCommand,
  UpdateCertificateCommand,
} from '../models';
import {
    CertificatesVmFromJSON,
    CertificatesVmToJSON,
    CreateCertificateCommandFromJSON,
    CreateCertificateCommandToJSON,
    UpdateCertificateCommandFromJSON,
    UpdateCertificateCommandToJSON,
} from '../models';

export interface ApiCertificateIdDeleteRequest {
    id: string;
}

export interface ApiCertificateIdPutRequest {
    id: string;
    updateCertificateCommand?: UpdateCertificateCommand;
}

export interface ApiCertificatePostRequest {
    createCertificateCommand?: CreateCertificateCommand;
}

/**
 * 
 */
export class CertificateApi extends runtime.BaseAPI {

    /**
     */
    async apiCertificateExportGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/certificate/export`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiCertificateExportGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiCertificateExportGetRaw(initOverrides);
    }

    /**
     */
    async apiCertificateGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CertificatesVm>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/certificate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CertificatesVmFromJSON(jsonValue));
    }

    /**
     */
    async apiCertificateGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CertificatesVm> {
        const response = await this.apiCertificateGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCertificateIdDeleteRaw(requestParameters: ApiCertificateIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiCertificateIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/certificate/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiCertificateIdDelete(requestParameters: ApiCertificateIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiCertificateIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiCertificateIdPutRaw(requestParameters: ApiCertificateIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiCertificateIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/certificate/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCertificateCommandToJSON(requestParameters.updateCertificateCommand),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiCertificateIdPut(requestParameters: ApiCertificateIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiCertificateIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiCertificatePostRaw(requestParameters: ApiCertificatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/certificate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCertificateCommandToJSON(requestParameters.createCertificateCommand),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async apiCertificatePost(requestParameters: ApiCertificatePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.apiCertificatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
